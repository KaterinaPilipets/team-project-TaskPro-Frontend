{"version":3,"file":"static/js/248.4b3ef06b.chunk.js","mappings":"yQAEaA,EAAeC,EAAAA,EAAAA,OAAH,6WAcZC,EAAaD,EAAAA,EAAAA,KAAH,mPAWVE,EAAMF,EAAAA,EAAAA,IAAH,iE,+CCvBHG,EAAgB,SAAC,GAMvB,IAAD,IALJC,KAAAA,OAKI,MALG,SAKH,MAJJC,IAAAA,OAII,SAHJC,EAGI,EAHJA,QACAC,EAEI,EAFJA,SACGC,ECRU,SAAkCC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IACIE,EAAKC,EADLC,GAAS,EAAAC,EAAA,GAA6BL,EAAQC,GAElD,GAAIK,OAAOC,sBAAuB,CAChC,IAAIC,EAAmBF,OAAOC,sBAAsBP,GACpD,IAAKG,EAAI,EAAGA,EAAIK,EAAiBC,OAAQN,IACvCD,EAAMM,EAAiBL,GACnBF,EAASS,QAAQR,IAAQ,GACxBI,OAAOK,UAAUC,qBAAqBC,KAAKb,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,GAEzB,CACA,OAAOE,CACT,CDLM,MACJ,OACE,UAACd,GAAD,gBAAcK,KAAMA,EAAME,QAASA,GAAaE,GAAhD,cACGH,IACC,UAACJ,EAAD,WAAY,KAEV,SAACC,EAAD,CAAKqB,MAAM,KAAKC,OAAO,KAAvB,UACE,gBAAKC,UAAS,UAAKC,EAAAA,EAAL,kBACV,OAITnB,KAGN,E,oBEtBYoB,EAAS,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAAQtB,EAAyB,EAAzBA,QAASuB,EAAgB,EAAhBA,UACxC,GAA0BC,EAAAA,EAAAA,KAAlBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACf,OACE,iCACE,mBAAQ1B,QAASA,EAAjB,UACE,gBAAKiB,MAAM,KAAKC,OAAO,KAAvB,UACE,gBAAKC,UAAS,UAAKC,EAAAA,EAAL,YAAaE,SAG9BI,IAAU,SAACC,EAAA,EAAD,CAAOC,QAASH,EAAhB,SAAwBF,MAcxC,EC+EYM,EAAWnC,EAAAA,EAAAA,GAAH,yMAcRoC,EAAQpC,EAAAA,EAAAA,EAAH,+KAOLqC,EAAWrC,EAAAA,EAAAA,EAAH,wFAIRsC,EAAUtC,EAAAA,EAAAA,EAAH,wFAIPuC,EAAavC,EAAAA,EAAAA,EAAH,mTASVwC,EAAOxC,EAAAA,EAAAA,KAAH,4IAOJyC,EAAOzC,EAAAA,EAAAA,IAAH,4GC1HJ0C,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbC,EAA0CD,EAA1CC,KAAMC,EAAoCF,EAApCE,YAAaC,EAAuBH,EAAvBG,SAAUC,EAAaJ,EAAbI,SAC7BC,GAASlB,EAAAA,EAAAA,KAATkB,KACR,OACE,UAACb,EAAD,YACE,SAACC,EAAD,UAAQQ,KACR,SAACL,EAAD,UAAaM,KACb,SAACL,EAAD,KACA,UAACC,EAAD,YACE,4BACE,SAACJ,EAAD,UAAU,cACV,SAACC,EAAD,UAAUQ,QAEZ,4BACE,SAACT,EAAD,UAAU,cACV,SAACC,EAAD,UAAUS,QAEZ,SAACpB,EAAD,CACEC,OAAQ,cACRtB,QAAS,kBAAM0C,GAAN,EACTnB,UAAW,iBAOpB,ECtDYoB,EAAOjD,EAAAA,EAAAA,GAAH,+HAQJkD,EAAelD,EAAAA,EAAAA,IAAH,yOAUZyC,EAAOzC,EAAAA,EAAAA,IAAH,gDAGJmD,EAASnD,EAAAA,EAAAA,IAAH,oGCjBNoD,EAAa,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YACvC,GAAgCxB,EAAAA,EAAAA,KAAxBkB,EAAR,EAAQA,KAAMjB,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,OAErB,OACE,UAACmB,EAAD,YACE,SAACD,EAAD,WACE,uBAAII,OAGN,SAACL,EAAD,UACGI,EAAWE,KAAI,SAAAZ,GAEd,OAAO,SAACD,EAAD,CAAoBC,KAAMA,GAAfA,EAAKa,GACxB,OAEH,SAAC,EAAD,WACE,SAACrD,EAAD,CAAeG,QAAS0C,EAAxB,SAA8B,uBAE/BhB,IACC,SAACC,EAAA,EAAD,CAAOC,QAASH,EAAhB,UACE,uBAAG,iBAKZ,EC7BKsB,EAAa,CACjB,CACEG,GAAI,IAEJZ,KAAM,yBACNC,YAAY,0OACZC,SAAU,MACVC,SAAU,kBAEZ,CACES,GAAI,IAEJZ,KAAM,yBACNC,YAAY,0OACZC,SAAU,OACVC,SAAU,mBAYd,EARiB,WACf,OACE,4BACE,uBAAG,YACH,SAACK,EAAD,CAAYC,WAAYA,EAAYC,YAAY,kBAGrD,C","sources":["components/ButtonPrimary/ButtonPrimary.styled.js","components/ButtonPrimary/ButtonPrimary.jsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","components/EditPanel/EditPanel.js","components/Board/Task/Task.styled.js","components/Board/Task/Task.js","components/Board/ColumnTask/ColumnTask.Styled.js","components/Board/ColumnTask/ColumnTask.js","pages/HomePage.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 14px 0px;\n  width: 100%;\n  font-size: var(--fontSize14);\n  font-family: var(--fontFamily);\n  font-weight: var(--fontWeight500);\n  color: var(--buttonAddCardColor);\n  background-color: var(--buttonAddCardBgColor);\n  border-radius: var(--borderRadius8);\n`;\n\nexport const StyledIcon = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  height: 28px;\n  margin-right: 8px;\n  background-color: var(--buttonAddCardIconBgColor);\n  border-radius: var(--borderRadius8);\n`;\n\nexport const Svg = styled.svg`\n  stroke: var(--buttonAddCardIconFill);\n`;\n","import icon from '../../sourse/sprite.svg';\n\nimport { StyledButton, StyledIcon, Svg } from './ButtonPrimary.styled';\n\nexport const ButtonPrimary = ({\n  type = 'submit',\n  svg = true,\n  onClick,\n  children,\n  ...allyProps\n}) => {\n  return (\n    <StyledButton type={type} onClick={onClick} {...allyProps}>\n      {svg && (\n        <StyledIcon>\n          (\n          <Svg width=\"14\" height=\"14\">\n            <use xlinkHref={`${icon}#icon-plus`} />\n          </Svg>\n          )\n        </StyledIcon>\n      )}\n      {children}\n    </StyledButton>\n  );\n};\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}","import icon from '../../sourse/sprite.svg';\nimport { useToggleModal } from '../../hooks';\nimport { Modal } from 'components/Modal';\nexport const SvgBtn = ({ idIcon, onClick, component }) => {\n  const { close, isOpen } = useToggleModal();\n  return (\n    <>\n      <button onClick={onClick}>\n        <svg width=\"16\" height=\"16\">\n          <use xlinkHref={`${icon}#${idIcon}`} />\n        </svg>\n      </button>\n      {isOpen && <Modal onClose={close}>{component}</Modal>}\n    </>\n  );\n\n  //   export const EditPanel = ({ IdIcon, fn }) => {\n  //   return iconsEdit.map(el => {\n  //     return (\n  //       <button type=\"button\" onClick={el.fn}>\n  //         <svg width=\"16\" height=\"16\">\n  //           <use xlinkHref={`${icon}#${el.name}`} />\n  //         </svg>\n  //       </button>\n  //     );\n  //   });\n};\n","import styled from '@emotion/styled';\n\n// export const CardDescription = styled.div`\n//   border-bottom: 1px solid var(--borderBottomColor);\n\n//   margin-bottom: 14px;\n// `;\n\n// export const CardText = styled.p`\n//\n//   color: var(--borderTopColor); // ПОМЕНЯТЬ ЦВЕТ ТЕКСТА!!!!\n//   position: relative;\n//   font-family: var(--poppinsFont);\n//   text-overflow: ellipsis;\n//   overflow: hidden;\n//\n//\n//   display: flex;\n//   width: 290;\n//   height: 38px;\n//   flex-direction: column;\n// `;\n\n// export const CardBottom = styled.div`\n//   display: flex;\n//   justify-content: space-between;\n// `;\n\n// export const CardBottomGrop = styled.div`\n//   display: flex;\n//   gap: 14px;\n//   align-items: baseline;\n// `;\n\n// export const CardPriority = styled.div`\n//   width: 56px;\n//   height: 31px;\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: space-between;\n// `;\n\n// export const CardSubtitle = styled.p`\n//   color: var(--borderTopColor); // ПОМЕНЯТЬ ЦВЕТ ТЕКСТА!!!!\n//   font-size: var(--fontSize8);\n//   font-family: var(--poppinsFont);\n//   letter-spacing: -0.16px;\n// `;\n\n// export const Circle = styled.div`\n//   display: flex;\n//   gap: 4px;\n//   align-items: flex-end;\n// `;\n\n// export const Priority = styled.p`\n//   position: relative;\n//   color: var(--titleColor);\n//   font-size: var(--fontSize10);\n//   font-family: var(--poppinsFont);\n//   letter-spacing: -0.2px;\n// `;\n\n// export const CardDeadline = styled.div`\n//   width: 53px;\n//   height: 31px;\n//   display: flex;\n//   flex-direction: column;\n//   justify-content: space-between;\n// `;\n\n// export const Deadline = styled.p`\n//   position: relative;\n//   color: var(--titleColor);\n//   height: 12px;\n//   font-size: var(--fontSize10);\n//   font-family: var(--poppinsFont);\n//   letter-spacing: -0.2px;\n// `;\n\n// export const CardBtnGrope = styled.div`\n//   display: flex;\n//   gap: 8px;\n//   flex-direction: row;\n//   align-items: flex-end;\n// `;\n\n// export const CardBtn = styled.button`\n//   width: 16px;\n//   height: 16px;\n//   padding: 0;\n//   display: flex;\n\n//   border: none;\n//   background-color: transparent;\n//   cursor: pointer;\n// `;\n\n// export const CardIcon = styled.svg`\n//   stroke: var(--borderTopColor); // ПОМЕНЯТЬ ЦВЕТ!!!\n//   width: 16px;\n//   height: 16px;\n//   fill: none;\n// `;\n\nexport const ListItem = styled.li`\n  border-left: 4px solid teal;\n  border-radius: 8px;\n  width: 100%;\n  height: 154px;\n  padding: 14px 24px;\n  background-color: var(--bgColor);\n  color: var(--textColor);\n`;\n\n//   width: 334px;\n\n//   overflow: hidden;\n\nexport const Title = styled.p`\n  font-size: var(--fontSize14);\n  font-weight: var(--fontWeight500);\n  margin-bottom: 8px;\n  letter-spacing: -0.28px;\n  color: var(--titleColor);\n`;\nexport const SubTitle = styled.p`\n  color: var(--subTitleColor);\n  font-size: var(--fontSize8);\n`;\nexport const SubText = styled.p`\n  color: var(--subTextColor);\n  font-size: var(--fontSize10);\n`;\nexport const TextHidden = styled.p`\n  font-size: var(--fontSize12);\n  letter-spacing: -0.24px;\n  display: -webkit-box;\n  -webkit-line-clamp: 2; // количество строк\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  line-height: 1.14;\n`;\nexport const Span = styled.span`\n  display: block;\n  height: 1px;\n  width: 100%;\n  background-color: var(--lineColor);\n  margin: 21px 0 14px 0;\n`;\nexport const Wrap = styled.div`\n  display: flex;\n  justify-contact: center;\n  aling-items: center;\n  gap: 14px;\n`;\n// [\n//   {\n//     name: 'Without priority',\n//     color: '--defaultPriorityColor',\n//   },\n//   {\n//     name: 'Low',\n//     color: '--lowPriorityColor',\n//   },\n//   {\n//     name: 'Medium',\n//     color: '--mediumPriorityColor',\n//   },\n// ];\n","import { SvgBtn } from 'components/EditPanel/EditPanel';\nimport {\n  ListItem,\n  Span,\n  TextHidden,\n  Title,\n  SubTitle,\n  SubText,\n  Wrap,\n} from './Task.styled';\n\nimport { useToggleModal } from '../../../hooks';\n// import { Modal } from 'components/Modal';\n\n// const EditPanelarray = [\n//   {\n//     name: 'icon-circle-box',\n//     fn: () => {},\n//   },\n//   {\n//     name: 'icon-pencil',\n//     fn: () => {},\n//   },\n//   {\n//     name: 'icon-trash',\n//     fn: () => {},\n//   },\n// ];\nexport const Task = ({ task }) => {\n  const { name, discription, priority, deadline } = task;\n  const { open } = useToggleModal();\n  return (\n    <ListItem>\n      <Title>{name}</Title>\n      <TextHidden>{discription}</TextHidden>\n      <Span />\n      <Wrap>\n        <div>\n          <SubTitle>Priority</SubTitle>\n          <SubText>{priority}</SubText>\n        </div>\n        <div>\n          <SubTitle>Deadline</SubTitle>\n          <SubText>{deadline}</SubText>\n        </div>\n        <SvgBtn\n          idIcon={'icon-pencil'}\n          onClick={() => open()}\n          component={'bbbbggg'}\n        />\n        {/* SvgBtn = ({(IdIcon, fn)}) */}\n        {/* <EditPanel iconsEdit={EditPanelarray} /> */}\n      </Wrap>\n    </ListItem>\n  );\n};\n","import styled from '@emotion/styled';\nexport const List = styled.ul`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  margin: 0;\n  padding: 0;\n  gap: 8px;\n`;\nexport const HeaderColumn = styled.div`\n  border-radius: 8px;\n  width: 100%;\n  hight: 56px;\n  padding: 14px 24px;\n  background-color: var(--bgColor);\n  color: var(--titleColor);\n  font-weight: var(--fontWeight500);\n  // margin-bottom: 14px;\n`;\nexport const Wrap = styled.div`\n  margin-bottom: 36px;\n`;\nexport const Column = styled.div`\n  width: 334px;\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n`;\n","import { ButtonPrimary } from 'components/ButtonPrimary/ButtonPrimary';\nimport { Task } from '../Task/Task';\nimport { Column, HeaderColumn, List, Wrap } from './ColumnTask.Styled';\nimport { useToggleModal } from '../../../hooks';\nimport { Modal } from 'components/Modal';\nexport const ColumnTask = ({ tasksArray, titleColumn }) => {\n  const { open, close, isOpen } = useToggleModal();\n  //   console.log(tasksArray);\n  return (\n    <Column>\n      <HeaderColumn>\n        <p>{titleColumn}</p>\n      </HeaderColumn>\n\n      <List>\n        {tasksArray.map(task => {\n          // console.log(task);\n          return <Task key={task.id} task={task} />;\n        })}\n      </List>\n      <Wrap>\n        <ButtonPrimary onClick={open}>Add another card</ButtonPrimary>\n      </Wrap>\n      {isOpen && (\n        <Modal onClose={close}>\n          <p>Add card</p>\n        </Modal>\n      )}\n    </Column>\n  );\n};\n\n// function ContactList() {\n//   const filteredContacts = useSelector(selectFilteredContacts);\n//   return (\n//     <List>\n//       {filteredContacts.map(({ id, name, number }) => (\n//         <Contact key={id} id={id} name={name} number={number} />\n//       ))}\n//     </List>\n//   );\n// }\n","import { ColumnTask } from 'components/Board/ColumnTask/ColumnTask';\nconst tasksArray = [\n  {\n    id: '1',\n    // titleColumn: '1col',or id\n    name: 'The Watch Spot Design1',\n    discription: `Create a visually stunning and eye-catching watch dial design that embodies our brand's essence of sleek aesthetics and modern elegance. Your design should be unique, innovative, and reflective of the latest trends in watch design.`,\n    priority: 'Low',\n    deadline: '12 / 05 / 2023',\n  },\n  {\n    id: '2',\n    // titleColumn: '2col',or id\n    name: 'The Watch Spot Design2',\n    discription: `Create a visually stunning and eye-catching watch dial design that embodies our brand's essence of sleek aesthetics and modern elegance. Your design should be unique, innovative, and reflective of the latest trends in watch design.`,\n    priority: 'High',\n    deadline: '12 / 05 / 2023',\n  },\n];\n\nconst HomePage = () => {\n  return (\n    <div>\n      <p>board </p>\n      <ColumnTask tasksArray={tasksArray} titleColumn=\"titleColumn\" />\n    </div>\n  );\n};\nexport default HomePage;\n"],"names":["StyledButton","styled","StyledIcon","Svg","ButtonPrimary","type","svg","onClick","children","allyProps","source","excluded","key","i","target","objectWithoutPropertiesLoose","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call","width","height","xlinkHref","icon","SvgBtn","idIcon","component","useToggleModal","close","isOpen","Modal","onClose","ListItem","Title","SubTitle","SubText","TextHidden","Span","Wrap","Task","task","name","discription","priority","deadline","open","List","HeaderColumn","Column","ColumnTask","tasksArray","titleColumn","map","id"],"sourceRoot":""}